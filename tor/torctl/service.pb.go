// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package torctl is a generated protocol buffer package.

It is generated from these files:
	service.proto
	messages.proto

It has these top-level messages:
	Endpoint
	ProxyRequest
	ProxyResponse
	RefreshProxy
	ReleaseRequest
	Empty
*/
package torctl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Proxies service

type ProxiesClient interface {
	GetProxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*Empty, error)
	RefreshLock(ctx context.Context, in *RefreshProxy, opts ...grpc.CallOption) (*Empty, error)
}

type proxiesClient struct {
	cc *grpc.ClientConn
}

func NewProxiesClient(cc *grpc.ClientConn) ProxiesClient {
	return &proxiesClient{cc}
}

func (c *proxiesClient) GetProxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	out := new(ProxyResponse)
	err := grpc.Invoke(ctx, "/torctl.Proxies/GetProxy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxiesClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/torctl.Proxies/Release", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxiesClient) RefreshLock(ctx context.Context, in *RefreshProxy, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/torctl.Proxies/RefreshLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Proxies service

type ProxiesServer interface {
	GetProxy(context.Context, *ProxyRequest) (*ProxyResponse, error)
	Release(context.Context, *ReleaseRequest) (*Empty, error)
	RefreshLock(context.Context, *RefreshProxy) (*Empty, error)
}

func RegisterProxiesServer(s *grpc.Server, srv ProxiesServer) {
	s.RegisterService(&_Proxies_serviceDesc, srv)
}

func _Proxies_GetProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProxiesServer).GetProxy(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Proxies_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProxiesServer).Release(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Proxies_RefreshLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RefreshProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProxiesServer).RefreshLock(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Proxies_serviceDesc = grpc.ServiceDesc{
	ServiceName: "torctl.Proxies",
	HandlerType: (*ProxiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProxy",
			Handler:    _Proxies_GetProxy_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Proxies_Release_Handler,
		},
		{
			MethodName: "RefreshLock",
			Handler:    _Proxies_RefreshLock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
